$Id: INSTALL,v 1.1.1.1 2003/11/20 20:08:17 daniel Exp $

Basic Installation with libdbi normally installed
=================================================

At first you should check if libdbi is correctly installed. If not,
please install it.

The "configure" shell script attempts to guess correct values for
various system-dependant variables used during compilation. It uses
those values to create a "Makefile" from a file "Makefile.in".
It also creates a header file "config.h" from "config.h.in".

The shell script "configure", the file "Makefile.in" and the
pre-header "config.h.in" are automatically generated by the tools
"autoconf", "automake" and "autoheader". This is done in one step
in with the script "autogen.sh". The shell script "configure"
is generated by "autoconf" from the file "configure.in".
The file "Makefile.in" is generated by "automake" from the file
"Makefile.am". And finally, the pre-header "config.h.in" is generated
by "autoheader" from the file "acconfig.h" and "configure.in".

But this is only important, if you want to add new checks to
"configure". You have to regenerate the shell script "configure" with
"autogen.sh". Normally, the package should compile without any
changes.

The simplest way to compile this package is:

  1. "cd" to the directory containing the package"s source code and type
     "./configure" to configure the package for your system.  If you"re
     using "csh" on an old version of System V, you might need to type
     "sh ./configure" instead to prevent "csh" from trying to execute
     "configure" itself.

     Running "configure" takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type "make" to compile the package.

  3. Optionally, type "make check" to run any self-tests that come with
     the package.

  4. Type "make install" to install the programs and any data files and
     documentation. You must be "root" to do this.

  5. You can remove the program binaries and object files from the
     source code directory by typing "make clean".  To also remove the
     files that "configure" created (so you can compile the package for
     a different kind of computer), type "make distclean".  There is
     also a "make maintainer-clean" target, but that is intended mainly
     for the package"s developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Installation with libdbi not installed
======================================

If you haven"t installed libdbi, "configure" will fail, unless you
specify a few libdbi paths. You have to know the path of the header
files of libdbi and the path to the library files.

You have to start "configure" with the arguments "--with-dbi-incdir"
and "--with-dbi-libdir":

  ./configure --with-dbi-incdir=[INCLUDE PATH] --with-dbi-libdir=[LIBRARY PATH]

The other steps are equal.

Installation Names
==================

By default, "make install" will install the wmr918 executable in
"/usr/sbin". The configuration file "wmr918.config" will be installed
in "/usr/etc". You can specify an
installation prefix other than "/usr" by giving "configure" the
option "--prefix=PATH".

You can specify a separate path for the configuration file with the
option "--sysconfdir=PATH". You can also specify a separate
installation directory for the executable with the option "--sbindir=PATH".

If you don't want to install "wmr918" because you want to run the
program directly from the package directory, you have to specify the
path to the configuration file. This can be done in two ways:

1. Run "wmr918" with the option "--config=./wmr918.config".

2. Configure the package with "./configure --sysconfdir=.". 

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that
the "configure" script does not know about.  You can give "configure"
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the "env" program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of "make" that
supports the "VPATH" variable, such as GNU "make".  "cd" to the
directory where you want the object files and executables to go and run
the "configure" script.  "configure" automatically checks for the
source code in the directory that "configure" is in and in "..".

If you have to use a "make" that does not supports the "VPATH"
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use "make distclean" before reconfiguring for another
architecture.

Sharing Defaults
================

If you want to set default values for "configure" scripts to share,
you can create a site shell script called "config.site" that gives
default values for variables like "CC", "cache_file", and "prefix".
"configure" looks for "PREFIX/share/config.site" if it exists, then
"PREFIX/etc/config.site" if it exists.  Or, you can set the
"CONFIG_SITE" environment variable to the location of the site script.
A warning: not all "configure" scripts look for a site script.
